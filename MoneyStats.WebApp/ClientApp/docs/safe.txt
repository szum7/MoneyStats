
Mon Feb 02 2015 01:00:00 GMT+0100 (Central European Standard Time)

export class TableRow {

    isExcludedAttr: IsExcludedAttribute;
    public get isExcluded(): boolean { return this.isExcludedAttr.value; }

    public setToExclude(message?: string): void {
        this.isExcludedAttr.value = false;
        if (!!message){
            this.isExcludedAttr.message = message;
        }
    }

    public setToInclude(): void {
        this.isExcludedAttr.value = false;
    }

    public toggleExclusion(): void {
        this.isExcludedAttr.value = !this.isExcludedAttr.value;
    }

    constructor() {
        this.isExcludedAttr = new IsExcludedAttribute();
    }
}



    .tr-column {
        display: inline-block;
        vertical-align: top;

        .tr-row {
            padding: 2px 5px;
            border-right: 1px solid #ddd;
            border-bottom: 1px solid #ddd;
            height: 30px;

            &.header {
                font-weight: bold;
            }

            &.excluded {
                background-color: #f1f1f1;
                color: #b6b6b6;
            }

            &.opened {
                margin-bottom: 100px;
            }

            &.opened + .tr-row {
                border-top: 1px solid #ddd;
            }
        }

        &:last-child .tr-row {
            border-right: none;
        }
    }




Upload() {
        let fileReader = new FileReader();
        fileReader.onload = (e) => {
            this.arrayBuffer = fileReader.result;
            var data = new Uint8Array(this.arrayBuffer);
            var arr = new Array();
            for (var i = 0; i != data.length; ++i) {
                arr[i] = String.fromCharCode(data[i]);
            }
            var bstr = arr.join("");
            var workbook = XLSX.read(bstr, { type: "binary" });
            var first_sheet_name = workbook.SheetNames[0];
            var worksheet = workbook.Sheets[first_sheet_name];
            console.log(XLSX.utils.sheet_to_json(worksheet, { raw: true }));
        }
        fileReader.readAsArrayBuffer(this.file);
        // - convert accounting date to date
        // - map hungarian names to english
        // - properties with null values doesn't show up
    }




    
        <div class="btn">
            <label for="btn1">
                <fa-icon icon="arrow-left"></fa-icon>
            </label>
            <input type="checkbox" id="btn1">
            <div class="sub-menu">
                <div class="sub-item">
                    <fa-icon icon="arrow-left"></fa-icon><span>Hello this is me</span>
                </div>
                <div class="sub-item"><span>Yet another</span></div>
            </div>
        </div>
        <div class="btn">
            <label for="btn2">
                <fa-icon icon="arrow-left"></fa-icon>
            </label>
            <input type="checkbox" id="btn2">
            <div class="sub-menu">
                <div class="sub-item"><span>Tissue</span></div>
                <div class="sub-item">
                    <fa-icon icon="arrow-left"></fa-icon><span>Yet another</span>
                </div>
                <div class="sub-item"><span>We are many</span></div>
            </div>
        </div>
        <div class="btn">
            <fa-icon icon="arrow-left"></fa-icon>
        </div>



        .buttons {
        

        .sub-menu {
            position: absolute;
            left: $side-nav-width;
            top: $side-nav-width;
            padding: 5px;
            border: 1px solid #ddd;
            background: #444;
            color: #eee;
            display: none;
        }

        .btn {
            color: #eee;

            /* Checkbox hack */
            input[type="checkbox"] {
                position: absolute;
                top: -9999px;
                left: -9999px;
            }
    
            label {
                -webkit-appearance: push-button;
                -moz-appearance: button;
                cursor: pointer;
                padding: 5px;
                display: block;
            }
    
            /* Toggled State */
            input[type="checkbox"]:checked ~ div.sub-menu {
                display: block;
            }
        }
    }




    

        .next-step-tooltip {
            top: 5px !important;
            left: 1px !important;
            // opacity: 0.8;
            font-size: 12px;

            .arrow {
                top: 10px !important;

                &:before {
                    border-right-color: $side-nav-background !important;
                }
            }

            .tooltip-inner {
                background: #f2f2f2;
                color: #333;
                border: 1px solid $side-nav-background;
                border-radius: 3px;
                text-align: left;
            }
        }



        
                <p class="title">
                    Next step
                    <span class="progress-text okay" *ngIf="isStepReadyToProgress">
                        <span class="icon">
                            <fa-icon icon="check"></fa-icon>
                        </span>
                        All is good, you're ready to advance.
                    </span>
                    <span class="progress-text not-okay" *ngIf="!isStepReadyToProgress">
                        <span class="icon">
                            <fa-icon icon="times"></fa-icon>
                        </span>
                        There are still unresolved issues!
                    </span>
                </p>