using System.Collections.Generic;
using System.ComponentModel.DataAnnotations.Schema;

namespace MoneyStats.DAL.Models
{
    /// <summary>
    /// Example 1: OrRuleGroup = a || b
    /// Example 2: OrRuleGroup = (a && b && c) || (d && e)
    /// Example 3: OrRuleGroup = (a && b) || c || d
    /// </summary>
    //[Table("OrRuleGroup")]
    //public partial class OrRuleGroup : EntityBase
    //{
    //    public int RuleGroupId { get; set; }

    //    public virtual RuleGroup RuleGroup { get; set; }
    //}

    //public partial class OrRuleGroup
    //{
    //    [NotMapped]
    //    public List<AndRuleGroup> AndRuleGroups { get; set; }
    //}
}



        /// <summary>
        /// This is a foreign key in the same table where the reference is.
        /// 
        /// Ezzel lehet összesíteni tranzakciókat, pl élelmiszerre költött kiadásokat.
        /// 
        /// A hivatkozott tranzakció egy összegzett Sum értékkel és hóvégi dátummal.
        /// A további propertyk ajánlatot tesz majd a program, de valószínűleg
        /// gyakran át fogják írni.
        /// 
        /// Összesítéseknél/kimutatásoknál vagy a hivatkozott, vagy azokat a tranzakciókat 
        /// használjuk, melyeknél ez a property nem null.
        /// 
        /// Rule kiértékelésnél a hivatkozott sor alatt egymás után listázzuk a hivatkozókat.
        /// (null értékű alatt a nem null értékűek.)
        /// </summary>
        public int TransactionGroupParentId { get; set; }

        public string OriginalContentId { get; set; }

        /// <summary>
        /// User can set an id. Useful when user wants to add a transaction by hand, 
        /// not read from an excel file.
        /// </summary>
        public string CustomId { get; set; }




            //List<PropertyInfo> rulableProperties = (typeof(Transaction).GetProperties())
            //    .Where(property => property.CustomAttributes
            //                       .Any(customAttribute => customAttribute.AttributeType == typeof(Rulable)))
            //    .ToList();