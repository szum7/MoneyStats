
                //context.Configuration.ProxyCreationEnabled = false;
                //context.Configuration.LazyLoadingEnabled = false;

        public List<Rule> GetWithEntitiesX()
        {
            using (var context = new MoneyStatsContext())
            {
                var list = context.Rules
                    .Where(rule => rule.State == 1)
                    .Include(x => x.RuleActions.Select(o => new RuleAction()
                    {
                        Id = o.Id,
                        Title = o.Title,
                        Property = o.Property,
                        RuleActionType = o.RuleActionType,
                        Value = o.Value,
                        RuleId = o.RuleId,
                        TagId = o.TagId
                    }))
                    .Include(x => x.AndConditionGroups.Select(o => new AndConditionGroup()
                    {
                        Id = o.Id,
                        RuleId = o.RuleId
                    })).ThenInclude(x => x.Conditions.Select(o => new Condition()
                    {
                        Id = o.Id,
                        Property = o.Property,
                        ConditionType = o.ConditionType,
                        Value = o.Value,
                        AndConditionGroupId = o.AndConditionGroupId
                    }))
                    .ToList();


                return list;
            }
        }        

        public List<Rule> GetWithEntities3()
        {
            using (var context = new MoneyStatsContext())
            {
                var list = context.Rules.Where(rule => rule.State == 1).ToList();

                return list;
            }
        }

        public List<Rule> GetWithEntitiesFaulty()
        {
            using (var context = new MoneyStatsContext())
            {
                var list = new List<Rule>();

                list = context.Rules
                    .Where(rule => rule.State == 1)
                    .Include(x => x.RuleActions)
                    .Include(x => x.AndConditionGroups).ThenInclude(x => x.Conditions)
                    .ToList();

                return list;
            }
        }








                    // TODO doesn't work. Even though tables are empty, foreign contraint still throws an exception
                    //db.Database.ExecuteSqlCommand("TRUNCATE TABLE [" + tableName + "]");




        /// <summary>
        /// BankRow list goes in, Transaction and TransactionTagConn list goes out.
        /// </summary>
        /// <param name="ruleGroups"></param>
        /// <param name="transactions"></param>
        public void Test(List<RuleGroup> ruleGroups, List<Transaction> transactions)
        {
            var o = 0;
            while (o < transactions.Count)
            {
                var tr = transactions[o];
                foreach (RuleGroup ruleGroup in ruleGroups) // item = (a & b & c) || d || (e & f) => action
                {
                    // Check if RuleGroup validates
                    var i = 0;
                    var oneOrRuleValidates = false;
                    while (i < ruleGroup.AndRuleGroups.Count && !oneOrRuleValidates)
                    {                        
                        var andRule = ruleGroup.AndRuleGroups[i];  // = (a & b & c)
                        var allAndRuleValidates = true;
                        var j = 0;
                        while (j < andRule.Rules.Count && allAndRuleValidates)
                        {
                            var rule = andRule.Rules[j]; // = a
                            
                            if (rule.RuleTypeId == (int)RuleTypeEnum.TrueRule)
                            {
                                // Do nothing
                            }
                            else if (rule.RuleTypeId == (int)RuleTypeEnum.IsGreaterThan)
                            {
                                var value = (IComparable)typeof(BankRow).GetProperty(rule.Property).GetValue(tr);
                                allAndRuleValidates = !RuleRepositoryV1.Compare("<", rule.Value as IComparable, value);
                            }
                            else if (rule.RuleTypeId == (int)RuleTypeEnum.IsLesserThan)
                            {
                                var value = (IComparable)typeof(BankRow).GetProperty(rule.Property).GetValue(tr);
                                allAndRuleValidates = !RuleRepositoryV1.Compare("<", rule.Value as IComparable, value);
                            }
                            else if (rule.RuleTypeId == (int)RuleTypeEnum.IsEqualTo)
                            {
                                var value = (IComparable)typeof(BankRow).GetProperty(rule.Property).GetValue(tr);
                                allAndRuleValidates = value == (IComparable)rule.Value;
                            }

                            j++;
                        }

                        if (allAndRuleValidates)
                        {
                            oneOrRuleValidates = true;
                        }

                        i++;
                    }

                    // Apply RuleAction if RuleGroup validated
                    if (oneOrRuleValidates)
                    {
                        foreach (RuleAction action in ruleGroup.RuleActions)
                        {
                            switch (action.RuleActionTypeId)
                            {
                                case (int)RuleActionTypeEnum.Omit:

                                    transactions.Remove(tr);
                                    o--; // The next iteration is now at the index where this item was removed.

                                    break;
                                case (int)RuleActionTypeEnum.SetValueOfProperty:

                                    tr.SetPropertyValueFromString(action.Property, action.Value?.ToString());

                                    break;
                                case (int)RuleActionTypeEnum.AddTags:



                                    break;
                                default:
                                    // Log not found ruleAction type error
                                    break;
                            }
                        }
                    }
                }
                o++;
            }
        }









using System.Collections.Generic;
using System.ComponentModel.DataAnnotations.Schema;

namespace MoneyStats.DAL.Models
{
    /// <summary>
    /// Example 1: OrRuleGroup = a || b
    /// Example 2: OrRuleGroup = (a && b && c) || (d && e)
    /// Example 3: OrRuleGroup = (a && b) || c || d
    /// </summary>
    //[Table("OrRuleGroup")]
    //public partial class OrRuleGroup : EntityBase
    //{
    //    public int RuleGroupId { get; set; }

    //    public virtual RuleGroup RuleGroup { get; set; }
    //}

    //public partial class OrRuleGroup
    //{
    //    [NotMapped]
    //    public List<AndRuleGroup> AndRuleGroups { get; set; }
    //}
}



        /// <summary>
        /// This is a foreign key in the same table where the reference is.
        /// 
        /// Ezzel lehet összesíteni tranzakciókat, pl élelmiszerre költött kiadásokat.
        /// 
        /// A hivatkozott tranzakció egy összegzett Sum értékkel és hóvégi dátummal.
        /// A további propertyk ajánlatot tesz majd a program, de valószínűleg
        /// gyakran át fogják írni.
        /// 
        /// Összesítéseknél/kimutatásoknál vagy a hivatkozott, vagy azokat a tranzakciókat 
        /// használjuk, melyeknél ez a property nem null.
        /// 
        /// Rule kiértékelésnél a hivatkozott sor alatt egymás után listázzuk a hivatkozókat.
        /// (null értékű alatt a nem null értékűek.)
        /// </summary>
        public int TransactionGroupParentId { get; set; }

        public string OriginalContentId { get; set; }

        /// <summary>
        /// User can set an id. Useful when user wants to add a transaction by hand, 
        /// not read from an excel file.
        /// </summary>
        public string CustomId { get; set; }




            //List<PropertyInfo> rulableProperties = (typeof(Transaction).GetProperties())
            //    .Where(property => property.CustomAttributes
            //                       .Any(customAttribute => customAttribute.AttributeType == typeof(Rulable)))
            //    .ToList();